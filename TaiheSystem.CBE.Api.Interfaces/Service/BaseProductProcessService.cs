//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author Taihe
// </auto-generated>
//------------------------------------------------------------------------------
using TaiheSystem.CBE.Api.Model;
using TaiheSystem.CBE.Api.Model.Dto;
using TaiheSystem.CBE.Api.Model.View;
using System.Collections.Generic;
using System.Threading.Tasks;
using SqlSugar;
using System.Linq;

namespace TaiheSystem.CBE.Api.Interfaces
{
    public class BaseProductProcessService : BaseService<Base_ProductProcess>, IBaseProductProcessService
    {

        #region CustomInterface 
        /// <summary>
        /// 查询工序（分页）
        /// </summary>
        /// <param name="parm"></param>
        /// <returns></returns>
        public PagedInfo<ProductProcessVM> QueryProcessPages(ProductProcessQueryDto parm)
        {
            var source = Db.Queryable<Base_ProductProcess, Sys_DataRelation, Base_WorkShop, Sys_DataRelation, Base_Factory>((a, b, c, d, e) => new object[] {
                JoinType.Inner,a.ID == b.Form,
                JoinType.Inner,b.To == c.ID,
                JoinType.Inner,c.ID == d.Form,
                JoinType.Inner,d.To == e.ID
            })
            .WhereIF(!string.IsNullOrEmpty(parm.QueryText), (a, b, c, d, e) => a.ProcessNo.Contains(parm.QueryText) || a.ProcessName.Contains(parm.QueryText))
            .Select((a, b, c, d, e) => new ProductProcessVM
            {
                ID = a.ID,
                ProcessNo = a.ProcessNo,
                ProcessName = a.ProcessName,
                Remark = a.Remark,
                Enable = a.Enable,
                WorkShopUID = c.ID,
                WorkShopNo = c.WorkShopNo,
                WorkShopName = c.WorkShopName,
                FactoryUID = e.ID,
                FactoryNo = e.FactoryNo,
                FactoryName = e.FactoryName,
                CreateTime = a.CreateTime,
                UpdateTime = a.UpdateTime,
                CreateID = a.CreateID,
                CreateName = a.CreateName,
                UpdateID = a.UpdateID,
                UpdateName = a.UpdateName
            })
            .MergeTable();

            return source.ToPage(new PageParm { PageIndex = parm.PageIndex, PageSize = parm.PageSize, OrderBy = parm.OrderBy, Sort = parm.Sort });
        }

        /// <summary>
        /// 根据ID查询工序
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ProductProcessVM GetProcess(string id)
        {
            var source = Db.Queryable<Base_ProductProcess, Sys_DataRelation, Base_WorkShop, Sys_DataRelation, Base_Factory>((a, b, c, d, e) => new object[] {
                JoinType.Inner,a.ID == b.Form,
                JoinType.Inner,b.To == c.ID,
                JoinType.Inner,c.ID == d.Form,
                JoinType.Inner,d.To == e.ID
            })
            .Where((a, b, c, d, e) => a.ID == id)
            .Select((a, b, c, d, e) => new ProductProcessVM
            {
                ID = a.ID,
                ProcessNo = a.ProcessNo,
                ProcessName = a.ProcessName,
                Remark = a.Remark,
                Enable = a.Enable,
                WorkShopUID = c.ID,
                WorkShopNo = c.WorkShopNo,
                WorkShopName = c.WorkShopName,
                FactoryUID = e.ID,
                FactoryNo = e.FactoryNo,
                FactoryName = e.FactoryName,
                CreateTime = a.CreateTime,
                UpdateTime = a.UpdateTime,
                CreateID = a.CreateID,
                CreateName = a.CreateName,
                UpdateID = a.UpdateID,
                UpdateName = a.UpdateName
            })
            .MergeTable();

            return source.First();
        }

        /// <summary>
        /// 查询所有工序
        /// </summary>
        /// <returns></returns>
        public List<ProductProcessVM> GetAllProcess(bool? enable = null)
        {
            var source = Db.Queryable<Base_ProductProcess, Sys_DataRelation, Base_WorkShop, Sys_DataRelation, Base_Factory>((a, b, c, d, e) => new object[] {
                JoinType.Inner,a.ID == b.Form,
                JoinType.Inner,b.To == c.ID,
                JoinType.Inner,c.ID == d.Form,
                JoinType.Inner,d.To == e.ID
            })
            .WhereIF(enable != null, (a, b, c, d, e) => a.Enable == enable)
            .Select((a, b, c, d, e) => new ProductProcessVM
            {
                ID = a.ID,
                ProcessNo = a.ProcessNo,
                ProcessName = a.ProcessName,
                Remark = a.Remark,
                Enable = a.Enable,
                WorkShopUID = c.ID,
                WorkShopNo = c.WorkShopNo,
                WorkShopName = c.WorkShopName,
                FactoryUID = e.ID,
                FactoryNo = e.FactoryNo,
                FactoryName = e.FactoryName,
                CreateTime = a.CreateTime,
                UpdateTime = a.UpdateTime,
                CreateID = a.CreateID,
                CreateName = a.CreateName,
                UpdateID = a.UpdateID,
                UpdateName = a.UpdateName
            })
            .MergeTable().OrderBy(m => m.ProcessNo);

            return source.ToList();
        }

        /// <summary>
        /// 查询同车间下是否存在相同工序编码
        /// </summary>
        /// <param name="Id"></param>
        /// <param name="processNo"></param>
        /// <param name="workshopId"></param>
        /// <returns></returns>
        public bool Any(string Id, string processNo, string workshopId)
        {
            return Db.Queryable<Base_ProductProcess, Sys_DataRelation>((a, b) => new object[] {
                JoinType.Inner,a.ID == b.Form
            })
            .Any((a, b) => a.ID != Id && a.ProcessNo == processNo && b.To == workshopId && b.Type == DataRelationType.Process_To_WorkShop.ToString());
        }
        #endregion

    }
}
